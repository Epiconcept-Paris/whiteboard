---
- name: hadoop group present on head node
  group:
    name: hadoop
  tags : create_users
- name: hadoop users present on head node
  tags : create_users
  user:
    name: "{{ item }}"
    generate_ssh_key: true
    group: hadoop
  register: created_users
  with_items: "{{ hadoopusers }}"
- name: global known host present
  tags: create_users
  copy:
    dest: /etc/ssh/ssh_known_hosts
    content: ''
    force: false
- name: checking hosts already registered
  tags: create_users
  shell: "ssh-keygen -F {{ item.split('.')[0] }} -f /etc/ssh/ssh_known_hosts || true"
  register: host_keys_status
  with_items: "{{ groups['nodes'] }}" 
  changed_when: false
- name: gathering all missing host keys
  tags: create_users
  command: "ssh-keyscan -t rsa -H {{ item.item.split('.')[0] }}"
  register: host_keys_to_insert
  with_items: "{{ host_keys_status.results }}"
  when: item.stdout == ''
  changed_when: false
  loop_control:
    label: "{{ item.item }}"
- name: known hosts registered for ssh
  tags: create_users
  lineinfile:
    path: /etc/ssh/ssh_known_hosts
    line: "{{ item.stdout  }} {{ item.item.item.split('.')[0]  }}"
    regexp: "{{ item.item.item.split('.')[0] }}$"
    create: true
  with_items: "{{ host_keys_to_insert.results }}"
  when: item.skipped is undefined
  loop_control:
    label: "{{ item.item.item }}"
